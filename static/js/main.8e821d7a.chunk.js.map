{"version":3,"sources":["components/Hero/index.js","components/Card/index.js","components/Counter/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Hero","className","React","Component","Card","src","alt","Counter","state","count","handleIncrement","setState","handleDecrement","this","onClick","Footer","href","width","height","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAqBeA,E,iLAhBP,OACI,6BAASC,UAAU,QACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,SAAd,8BAGA,wBAAIA,UAAU,YAAd,8B,GATLC,IAAMC,WC2BVC,E,iLAzBP,OAEI,yBAAKH,UAAU,UACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,cACX,4BAAQA,UAAU,iBACd,yBAAKI,IAAI,qBAAqBC,IAAI,OAG1C,yBAAKL,UAAU,gBACX,yBAAKA,UAAU,SAEX,yBAAKA,UAAU,iBACX,uBAAGA,UAAU,cAAb,oB,GAfbC,IAAMC,WCuCVI,E,2MArCbC,MAAQ,CACNC,MAAO,G,EAITC,gBAAkB,WAEhB,EAAKC,SAAS,CAAEF,MAAO,EAAKD,MAAMC,MAAQ,K,EAI5CG,gBAAkB,WAEhB,EAAKD,SAAS,CAAEF,MAAO,EAAKD,MAAMC,MAAQ,K,wEAK1C,OACE,yBAAKR,UAAU,oBACb,yBAAKA,UAAU,qCAAf,kBAGA,yBAAKA,UAAU,aACb,uBAAGA,UAAU,aAAb,gBAAuCY,KAAKL,MAAMC,OAClD,4BAAQR,UAAU,kBAAkBa,QAASD,KAAKH,iBAAlD,aAEU,IACV,4BAAQT,UAAU,iBAAiBa,QAASD,KAAKD,iBAAjD,mB,GA9BYV,IAAMC,WCcbY,E,iLAZP,OAEI,yBAAKd,UAAU,UACX,uBAAGe,KAAK,oBACJ,yBAAKX,IAAI,qCAAqCC,IAAI,kBAAkBW,MAAM,MAAMC,OAAO,a,GANtFhB,IAAMC,WC2CZgB,MA7Bf,WACE,OAEE,yBAAKlB,UAAU,aACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,CAAMa,QAASD,KAAKH,mBAEtB,yBAAKT,UAAU,UACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,UACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,UACb,kBAAC,EAAD,QAGJ,yBAAKA,UAAU,iBACb,kBAAC,EAAD,OAEF,kBAAC,EAAD,QC3BcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8e821d7a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// By extending the React.Component class, Counter inherits functionality from it\r\nclass Hero extends React.Component {\r\n    render() {\r\n        return (\r\n            <section className=\"hero\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container\">\r\n                        <h1 className=\"title\">\r\n                            Welcome to the Clicky Game\r\n              </h1>\r\n                        <h2 className=\"subtitle\">\r\n                            The Holiday Edition\r\n              </h2>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nexport default Hero;","import React from \"react\";\r\n\r\n// By extending the React.Component class, Counter inherits functionality from it\r\nclass Card extends React.Component {\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"column\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-image\">\r\n                        <figure className=\"image is-4by3\">\r\n                            <img src=\"images/image_5.jpg\" alt=\"\" />\r\n                        </figure>\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        <div className=\"media\">\r\n\r\n                            <div className=\"media-content\">\r\n                                <p className=\"title is-4\">Image 3</p>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\nexport default Card;","import React from \"react\";\r\n\r\n// By extending the React.Component class, Counter inherits functionality from it\r\nclass Counter extends React.Component {\r\n  // Setting the initial state of the Counter component\r\n  state = {\r\n    count: 0\r\n  };\r\n\r\n  // handleIncrement increases this.state.count by 1\r\n  handleIncrement = () => {\r\n    // We always use the setState method to update a component's state\r\n    this.setState({ count: this.state.count + 1 });\r\n  };\r\n\r\n  // handleDecrement decreases this.state.count by 1\r\n  handleDecrement = () => {\r\n    // We always use the setState method to update a component's state\r\n    this.setState({ count: this.state.count - 1 });\r\n  };\r\n\r\n  // The render method returns the JSX that should be rendered\r\n  render() {\r\n    return (\r\n      <div className=\"card text-center\">\r\n        <div className=\"card-header bg-primary text-white\">\r\n          Click Counter!\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <p className=\"card-text\">Click Count: {this.state.count}</p>\r\n          <button className=\"btn btn-primary\" onClick={this.handleIncrement}>\r\n            Increment\r\n          </button>{\" \"}\r\n          <button className=\"btn btn-danger\" onClick={this.handleDecrement}>\r\n            Decrement\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\n\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"footer\">\r\n                <a href=\"https://bulma.io\">\r\n                    <img src=\"./images/made-with-bulma--dark.png\" alt=\"Made with Bulma\" width=\"128\" height=\"24\" />\r\n                </a>\r\n            </div>\r\n\r\n\r\n        );\r\n    };\r\n};\r\nexport default Footer;","import React from \"react\";\n\nimport './App.css';\nimport '../node_modules/bulma/css/bulma.min.css';\n\n// import Hero\nimport Hero from \"./components/Hero\";\n\n// import Card \nimport Card from \"./components/Card\";\n\n// import Counter \nimport Counter from \"./components/Counter\";\n\n// import Footer \nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n\n    <div className=\"container\">\n      <Hero />\n      <div className=\"columns\">\n        <div className=\"column\">\n          <Card onClick={this.handleIncrement}/>\n        </div>\n        <div className=\"column\">\n          <Card />\n        </div>\n        <div className=\"column\">\n          <Card />\n        </div>\n        <div className=\"column\">\n          <Card />\n        </div>\n      </div>\n      <div className=\"media-content\">\n        <Counter />\n      </div>\n      <Footer />\n    </div>\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}